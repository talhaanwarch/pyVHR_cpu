### DATASET ###
#
# dataset: name of the module that implement the pyVHR.datasets.Dataset class. The class and the module must have the same name!
# path: path to the module where 'dataset' is defined. If 'None' then the dataset is searched inside the package datasets dir "pyVHR/datasets/".
# videodataDIR: path to the video directory of the dataset.
# BVPdataDIR: path to the ground truth BVP of the dataset.
# videoIdx: list of video ids that will be processed in the experiment. To process all the videos use '[]'.
#
[DATASET]
dataset        = lgi_ppgi
path           = None
videodataDIR   = /var/datasets/VHR1/
BVPdataDIR     = /var/datasets/VHR1/
videoIdx       = []


### BVP ###
#
# winSize: the signal is divided into blocks/windows of size winSize (in seconds) with stride of 1 sec. ; each window will became a BPM estimate.
# methods:  rPPG Deep Method. Currently available: "MTTS_CAN".
# post_filtering: list of FILTER names that are applied to the BVP.
#
[BVP]
winSize        = 10
methods        = ['MTTS_CAN']
post_filtering = ["DETREND", "BPFILTER"]

### BPM ###
# 
# type: BPM is extracted using different approaches: 'welch', 'clustering'.
# minHz: float low threashold frequency (Hz). BPM is computed excluding frequencies below this threashold.
# maxHz: float high threashold frequency (Hz). BPM is computed excluding frequencies above this threashold
#
[BPM]
type = welch
minHz = 0.65
maxHz = 4.0

### FILTERS ###
#
# path: 'path/to/module.py' that contains the filter method function 'name'; 'None' to use "pyVHR.BVP.filters" methods.
# name: name of the function that implements the filter method.
# params: dict of parameters used by the method; if the method takes no parameters write {}.
#
# Custom filter methods must comply with the function signature documented in pyVHR.BVP.filters.
#
[DETREND]
path = None
name = detrend
params = {'detLambda':10}

[BPFILTER]
path = None
name = BPfilter
params = {'minHz':0.65, 'maxHz':4.0, 'fps':'adaptive', 'order':6}

[ZSCORE]
path = None
name = zscore
params = {}